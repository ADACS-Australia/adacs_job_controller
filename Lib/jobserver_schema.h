// generated by ddl2cpp.py schema.ddl jobserver_schema schema
#ifndef SCHEMA_JOBSERVER_SCHEMA_H
#define SCHEMA_JOBSERVER_SCHEMA_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace schema
{
  namespace DjangoMigrations_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct App
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "app";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T app;
            T& operator()() { return app; }
            const T& operator()() const { return app; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Applied
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "applied";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T applied;
            T& operator()() { return applied; }
            const T& operator()() const { return applied; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace DjangoMigrations_

  struct DjangoMigrations: sqlpp::table_t<DjangoMigrations,
               DjangoMigrations_::Id,
               DjangoMigrations_::App,
               DjangoMigrations_::Name,
               DjangoMigrations_::Applied>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "django_migrations";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T djangoMigrations;
        T& operator()() { return djangoMigrations; }
        const T& operator()() const { return djangoMigrations; }
      };
    };
  };
  namespace JobserverJob_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Parameters
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "parameters";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T parameters;
            T& operator()() { return parameters; }
            const T& operator()() const { return parameters; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace JobserverJob_

  struct JobserverJob: sqlpp::table_t<JobserverJob,
               JobserverJob_::Id,
               JobserverJob_::Parameters,
               JobserverJob_::State>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "jobserver_job";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T jobserverJob;
        T& operator()() { return jobserverJob; }
        const T& operator()() const { return jobserverJob; }
      };
    };
  };
} // namespace schema
#endif
