# clang-format configuration for C++23/26 project with C++20 modules support
# Based on industry best practices and modern C++ formatting guidelines

---
Language: Cpp
# Use the latest standard for best C++23/26 support
Standard: c++20

# Base style - using Google as starting point but heavily customized
BasedOnStyle: Google

# Indentation settings
IndentWidth: 4
TabWidth: 4
UseTab: Never
ContinuationIndentWidth: 4

# Column width
ColumnLimit: 120

# Access modifiers
AccessModifierOffset: -4
IndentAccessModifiers: false

# Alignment settings
AlignAfterOpenBracket: Align
AlignArrayOfStructures: Right
AlignConsecutiveAssignments: 
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
  AlignCompound: true
  PadOperators: true
AlignConsecutiveBitFields: 
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
AlignConsecutiveDeclarations: 
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
AlignEscapedNewlines: Left
AlignOperands: Align
AlignTrailingComments: true

# Braces settings - matching your existing style
BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel: false
  AfterClass: true
  AfterControlStatement: Always
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: false
  AfterStruct: true
  AfterUnion: true
  AfterExternBlock: false
  BeforeCatch: true
  BeforeElse: true
  BeforeLambdaBody: false
  BeforeWhile: true
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false

# C++20 modules support
SortIncludes: CaseSensitive
IncludeBlocks: Regroup
IncludeCategories:
  # C system headers
  - Regex: '^<[a-z_]+\.h>'
    Priority: 1
    SortPriority: 1
    CaseSensitive: false
  # C++ standard library headers  
  - Regex: '^<[a-z_]+>'
    Priority: 2
    SortPriority: 2
    CaseSensitive: false
  # Other system headers
  - Regex: '^<.*\.h[pp]*>'
    Priority: 3
    SortPriority: 3
    CaseSensitive: false
  # Third-party library headers
  - Regex: '^<.*>'
    Priority: 4
    SortPriority: 4
    CaseSensitive: false
  # Project headers
  - Regex: '^".*"'
    Priority: 5
    SortPriority: 5
    CaseSensitive: false

# Function and parameter formatting
AllowAllArgumentsOnNextLine: false
AllowAllParametersOfDeclarationOnNextLine: false
BinPackArguments: false
BinPackParameters: false
AllowShortBlocksOnASingleLine: Empty
AllowShortCaseLabelsOnASingleLine: false
AllowShortEnumsOnASingleLine: false
AllowShortFunctionsOnASingleLine: Empty
AllowShortIfStatementsOnASingleLine: Never
AllowShortLambdasOnASingleLine: Empty
AllowShortLoopsOnASingleLine: false

# Break settings
BreakBeforeConceptDeclarations: Always
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeColon
BreakInheritanceList: BeforeColon
BreakStringLiterals: true
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes

# Spacing settings
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 2
SpacesInAngles: Never
SpacesInCStyleCastParentheses: false
SpacesInConditionalStatement: false
SpacesInContainerLiterals: false
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
SpacesInParentheses: false
SpacesInSquareBrackets: false

# Pointer and reference alignment - matching your style  
DerivePointerAlignment: false
PointerAlignment: Left
ReferenceAlignment: Pointer

# Modern C++ features
Cpp11BracedListStyle: true
FixNamespaceComments: true
ReflowComments: true
RemoveBracesLLVM: false
RemoveSemicolon: true
SeparateDefinitionBlocks: Always
ShortNamespaceLines: 1

# Function declaration formatting
IndentRequiresClause: true
RequiresClausePosition: OwnLine
IndentExternBlock: NoIndent

# Lambda formatting
LambdaBodyIndentation: Signature

# Penalties for breaking
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 0
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyIndentedWhitespace: 0
PenaltyReturnTypeOnItsOwnLine: 200

# Empty line settings
KeepEmptyLinesAtTheStartOfBlocks: false
MaxEmptyLinesToKeep: 2

# Sorting and grouping
SortUsingDeclarations: true

# Macro handling
IndentPPDirectives: None
MacroBlockBegin: ''
MacroBlockEnd: ''

# Comment formatting
CommentPragmas: '^ IWYU pragma:'

# Other formatting options
CompactNamespaces: false
ConstructorInitializerIndentWidth: 4
ExperimentalAutoDetectBinPacking: false
IndentCaseBlocks: false
IndentCaseLabels: true
IndentGotoLabels: true
IndentWrappedFunctionNames: false
InsertBraces: false
NamespaceIndentation: None
PPIndentWidth: -1
QualifierAlignment: Leave